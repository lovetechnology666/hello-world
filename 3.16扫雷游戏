game.h

#include <time.h>
#include <stdlib.h>
#define ROW 9
#define COL 9
#define ROWS ROW+2
#define COLS COL+2
#define EASY_COUNT 50
void  Initboard(char board[ROWS][COLS], int rows, int cols, char ret);                       //布置数组（棋盘）
void  Displayboard(char board[ROWS][COLS], int row, int col);                                //打印数组
void  Setmine(char board[ROWS][COLS], int row, int col);                                     //布置雷的信息
void  Findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);              //扫雷
int   find_num(char mine[ROWS][COLS], int x, int y);                                         //排雷


game.c

#include "game.h"
#include "stdio.h"

//布置棋盘（数组）
void  Initboard(char board[ROWS][COLS], int rows, int cols, char ret)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < rows; i++)
	{
		for (j = 0; j < cols; j++)
		{
			board[i][j] = ret;
		}
	}
}

//打印数组
void  Displayboard(char board[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	printf("--------扫雷游戏----------\n");
	for (i = 0; i <= row; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (i = 1; i <= row; i++)
	{
		printf("%d ", i);
		for (j = 1; j <= col; j++)
		{
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}
	printf("--------扫雷游戏----------\n");
}



//布置雷
void  Setmine(char board[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int count = EASY_COUNT;
	while (count)
	{
		x = rand() % 9 + 1;
		y = rand() % 9 + 1;
		if (board[x][y] != '1')
		{
			board[x][y] = '1';
			count--;
		}
	}
}


//排雷
int   find_num(char mine[ROWS][COLS], int x, int y)
{
	return 
		mine[x - 1][y] + mine[x - 1][y - 1] +
		mine[x - 1][y + 1] + mine[x][y - 1] +
		mine[x][y + 1] + mine[x + 1][y] +
		mine[x + 1][y + 1] + mine[x + 1][y - 1] - 8 * '0';
}


//扫雷
void  Findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int win = 0;
	while (win<row*col-EASY_COUNT)
	{
		int x = 0;
		int y = 0;
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row&&y >= 1 && y <= col)
		{
			if (mine[x][y] == '1')
			{
				printf("踩到了雷，很遗憾\n");
				Displayboard(mine, row,col);
				break;
			}
			else
			{
				int number = find_num(mine, x, y);
				show[x][y] = number+'0';
				Displayboard(show, row, col);
			}

		}
		else
		{
			printf("输入错误，请重新输入\n");
		}
		win++;
	}
	if (win == row*col - EASY_COUNT)
	{
		printf("排雷成功！！！\n");
	}
}


test.c

#include <stdio.h>
#include "game.h"
void menu()
{
	printf("*************************\n");
	printf("*******1  play **********\n");
	printf("*******0  delete ********\n");
	printf("*************************\n");
}
void game()
{
	//创建棋盘对应的数组
	char mine[ROWS][COLS];                                           //布置好的雷的信息
	char show[ROWS][COLS];                                           //排查出的雷的信息
	Initboard(mine, ROWS, COLS, '0');
	Initboard(show, ROWS, COLS, '*');
	//打印函数game.h

#include <time.h>
#include <stdlib.h>
#define ROW 9
#define COL 9
#define ROWS ROW+2
#define COLS COL+2
#define EASY_COUNT 50
void  Initboard(char board[ROWS][COLS], int rows, int cols, char ret);                       //布置数组（棋盘）
void  Displayboard(char board[ROWS][COLS], int row, int col);                                //打印数组
void  Setmine(char board[ROWS][COLS], int row, int col);                                     //布置雷的信息
void  Findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);              //扫雷
int   find_num(char mine[ROWS][COLS], int x, int y);                                         //排雷


game.c

#include "game.h"
#include "stdio.h"

//布置棋盘（数组）
void  Initboard(char board[ROWS][COLS], int rows, int cols, char ret)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < rows; i++)
	{
		for (j = 0; j < cols; j++)
		{
			board[i][j] = ret;
		}
	}
}

//打印数组
void  Displayboard(char board[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	printf("--------扫雷游戏----------\n");
	for (i = 0; i <= row; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (i = 1; i <= row; i++)
	{
		printf("%d ", i);
		for (j = 1; j <= col; j++)
		{
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}
	printf("--------扫雷游戏----------\n");
}



//布置雷
void  Setmine(char board[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int count = EASY_COUNT;
	while (count)
	{
		x = rand() % 9 + 1;
		y = rand() % 9 + 1;
		if (board[x][y] != '1')
		{
			board[x][y] = '1';
			count--;
		}
	}
}


//排雷
int   find_num(char mine[ROWS][COLS], int x, int y)
{
	return 
		mine[x - 1][y] + mine[x - 1][y - 1] +
		mine[x - 1][y + 1] + mine[x][y - 1] +
		mine[x][y + 1] + mine[x + 1][y] +
		mine[x + 1][y + 1] + mine[x + 1][y - 1] - 8 * '0';
}


//扫雷
void  Findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int win = 0;
	while (win<row*col-EASY_COUNT)
	{
		int x = 0;
		int y = 0;
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row&&y >= 1 && y <= col)
		{
			if (mine[x][y] == '1')
			{
				printf("踩到了雷，很遗憾\n");
				Displayboard(mine, row,col);
				break;
			}
			else
			{
				int number = find_num(mine, x, y);
				show[x][y] = number+'0';
				Displayboard(show, row, col);
			}

		}
		else
		{
			printf("输入错误，请重新输入\n");
		}
		win++;
	}
	if (win == row*col - EASY_COUNT)
	{
		printf("排雷成功！！！\n");
	}
}


test.c

#include <stdio.h>
#include "game.h"
void menu()
{
	printf("*************************\n");
	printf("*******1  play **********\n");
	printf("*******0  delete ********\n");
	printf("*************************\n");
}
void game()
{
	//创建棋盘对应的数组
	char mine[ROWS][COLS];                                           //布置好的雷的信息
	char show[ROWS][COLS];                                           //排查出的雷的信息
	Initboard(mine, ROWS, COLS, '0');
	//Displayboard(mine, ROW, COL);
	Displayboard(show, ROW, COL);                                    //布置雷
	srand((unsigned int)(time(NULL)));
	Setmine(mine, ROW, COL);
	//Displayboard(mine, ROW, COL);                                  //排雷
	Findmine(mine, show, ROW, COL);


}
int main()
{
	int i = 0;
	printf("请输入(1/0)选择游戏！\n");
	do
	{
		menu();
		scanf("%d", &i);
		switch (i)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("请重新输入(1/0)\n");
			break;
		}
	} while (i);
	return 0;
}
